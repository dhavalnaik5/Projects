#include<stdio.h>
#include<conio.h>
#include<iostream>
#include<graphics.h>
#include<math.h>
#include<process.h>
#include<dos.h>
#include<stdlib.h>
#include<time.h>
//#include<chrono.h>
//Game Varibles
int choice;
int Time=0;


//Pacman varibles
int bodyi=500,bodyj=355,x=0,y=-1,ch;
//Ghost1 varibles
int G1x=300,G1y=300,g1x=0,g1y=-1;
//Ghost2 variables
int G2x=320,G2y=300,g2x=0,g2y=-1;
//Ghost3 variables
int G3x=340,G3y=300,g3x=0,g3y=-1;
//Ghost4 variables
int G4x=360,G4y=300,g4x=0,g4y=-1;

void startGame();
void exitGame();
void mainMenu();
void level1();
void level2();
void movePacman();
void pacLevel1();
void pacLevel2();
int checkBorder(int, int);
int check(int, int);
void displayScore();
void Ghost1(int g1);
void Ghost2(int g2);
void Ghost3(int g3);
void Ghost4(int g4);
void score();


void score()
{
    Time++ ;      //Score
    sleep(1);
}



int check(int bodyi,int bodyj,int Colour)
{
if(getpixel(bodyi,bodyj) != Colour && getpixel(bodyi+9,bodyj) != Colour && getpixel(bodyi,bodyj+9) != Colour && getpixel(bodyi-9,bodyj) != Colour && getpixel(bodyi,bodyj-9) != Colour)
{
return 0;
}
else
{
return 1;
}
}

void Death()
{

    if(check(bodyi,bodyi,RED))

    {
	//system("PAUSE");
	//cleardevice();
	//setcolor(RED);
	outtextxy(300,300,"GAME OVER");
	exitGame();
    }
   else if(check(bodyi,bodyi,GREEN))
    {
	//system("PAUSE");
	//cleardevice();
	outtextxy(300,300,"GAME OVER");
	exitGame();
    }
    else if(check(bodyi,bodyj,CYAN))
    {
	//system("PAUSE");
	//cleardevice();
    outtextxy(300,300,"GAME OVER");
	exitGame();
    }
    else if(check(bodyi,bodyi,MAGENTA))
    {
	//system("PAUSE");
	//cleardevice();
	outtextxy(300,300,"GAME OVER");
	exitGame();
    }
    else
	return;
}



void startGame()
{
    //Start = std::chrono::high_resolution_clock::now();
    LEVEL:
    cleardevice();
    setcolor(YELLOW);
    outtextxy(110,150,"LEVEL 1....");
    outtextxy(100,180,"Ghosts : 3");
    outtextxy(410,150,"LEVEL 2....");
    outtextxy(400,180,"Ghosts : 4");
    outtextxy(210,400,"Enter Choice : ");

scanf("%d",&choice);
switch(choice)
    {
    case 1:
	cleardevice();
	level1();
	pacLevel1();
	break;

    case 2:
	cleardevice();
	level1();
	pacLevel2();
	break;

    default:
	cleardevice();
	outtextxy(210,170,"There Is No Such Level....");
	getch();
	cleardevice();
	goto LEVEL;
    }
}

void exitGame()
{
    getch();
    cleardevice();
    getch();
    system("PAUSE");
    outtextxy(300,200,"GAME OVER");
    printf("Time Survived : %d",Time);
    getch();
    exit(0);
}

void mainMenu()
{
MENU :
    setcolor(BLACK);
    circle(300,100,40);
    setfillstyle(1, YELLOW);
    pieslice(300,100,30,340,40);
    circle(315,80,5);
    floodfill(315,80,0);
    setcolor(CYAN);
    outtextxy(250,150,"PAC-MAN");
    setcolor(5);
    outtextxy(400,370,"A Project By:");
    outtextxy(400,385,"Hasnain Merchant  B 32");
    outtextxy(400,400,"Anuraag Paithane   B 42");
    outtextxy(400,415,"Dhaval Naik            B 37");
    outtextxy(400,430,"Hritik Batra             B 03");
    setcolor(YELLOW);
    outtextxy(210,180,"1.Start Game");
    setcolor(RED);
    outtextxy(210,210,"2.Exit");

    int choice;
    outtextxy(210,240,"Enter Choice : ");

    scanf("%d",&choice);
    switch(choice)
    {
    case 1:
	startGame();
	break;
    case 2:
	exitGame();
	break;
    default :
	cleardevice();
	outtextxy(210,150,"Entered Wrong Input ");
	getch();
	cleardevice();
	goto MENU;
    }
}

void level1()
{
   // Dots();

   // MAZE:
	setlinestyle(0, 0, 3);
	line(310, 202, 330, 202);
	setcolor(1);
	setbkcolor(0);
	setlinestyle(0, 1, 3);
	setfillstyle(1, 1);
	//lines thick - drawing;
	line(470, 205, 470, 165);//right mid
	line(470, 165, 545, 165);//right
	line(545, 165, 545, 30);
	line(545, 30, 330, 30);//right up
	line(330, 30, 330, 84);
	line(330, 84, 310, 84);
	line(310, 84, 310, 30);
	line(310, 30, 95, 30);//left up
	line(95, 30, 95, 165);//left
	line(95, 165, 170, 165);//left mid
	line(170, 165, 170, 235);
	line(170, 235, 170, 275);
	line(170, 275, 95, 275);
	line(95, 275, 95, 325);
	line(95, 325, 115, 325);
	line(115, 325, 115, 340);
	line(115, 340, 95, 340);
	line(95, 340, 95, 400);
	line(95, 400, 545, 400);//down
	line(545, 400, 545, 340);
	line(545, 340, 525, 340);
	line(525, 340, 525, 325);
	line(525, 325, 545, 325);
	line(545, 325, 545, 275);//right
	line(545, 275, 470, 275);
	line(470, 275, 470, 235);
	line(470, 235, 470, 205);//right mid

	//T's
	//#1(up)-right
	line(445, 205, 445, 110);//1
	line(445, 110, 430, 110);//2-side(up)
	line(430, 110, 430, 165);//3
	line(445, 205, 430, 205);//4-side(down)
	line(430, 205, 430, 180);//5
	line(355, 165, 355, 180);//6-exterior(left)
	line(355, 165, 430, 165);//7-exterior(up)
	line(355, 180, 430, 180);//8-exterior(down)
	floodfill(440, 200, 1);
	//#2-center
	line(405, 110, 235, 110);//1-up
	line(405, 110, 405, 136);//2-side(right)
	line(405, 136, 330, 136);//3-interior(right)
	line(330, 136, 330, 180);
	line(330, 180, 310, 180);//5-exterior(down)
	line(310, 180, 310, 136);
	line(310, 136, 235, 136);
	line(235, 136, 235, 110);//8-lateral(left)
	floodfill(400, 115, 1);
	//#3-left
	line(195, 205, 210, 205);//1-exterior(down)
	line(195, 205, 195, 110);//2-side(left)
	line(195, 110, 210, 110);//3-exterior(up)
	line(210, 110, 210, 165);//4-interior
	line(210, 165, 285, 165);
	line(285, 165, 285, 180);
	line(285, 180, 210, 180);
	line(210, 180, 210, 205);//8-interior(right-down)
	floodfill(200, 200, 1);
	//#4(down)-center
	line(235, 275, 235, 260);//#1-left
	line(235, 260, 405, 260);//#2-up
	line(405, 260, 405, 275);//#3-right
	line(405, 275, 325, 275);
	line(325, 275, 325, 305);//#5-center-right
	line(325, 305, 315, 305);
	line(315, 305, 315, 275);
	line(235, 275, 315, 275);
	floodfill(300, 270, 1);
	//#5(down)-center
	line(235, 345, 235, 335);//#1-left
	line(235, 335, 405, 335);
	line(405, 335, 405, 345);
	line(405, 345, 325, 345);
	line(325, 345, 325, 370);
	line(325, 370, 315, 370);
	line(315, 370, 315, 345);
	line(315, 345, 235, 345);
	floodfill(300, 340, 1);
	//#6(down)-left
	line(195, 335, 210, 335);
	line(210, 335, 210, 370);
	line(210, 370, 290, 370);
	line(290, 370, 290, 380);
	line(290, 380, 120, 380);
	line(120, 380, 120, 370);
	line(120, 370, 195, 370);
	line(195, 370, 195, 335);
	floodfill(200, 340, 1);
	//#7(down) - right
	line(430, 335, 445, 335);
	line(445, 335, 445, 370);
	line(445, 370, 525, 370);
	line(525, 370, 525, 380);
	line(525, 380, 350, 380);
	line(350, 380, 350, 370);
	line(350, 370, 430, 370);
	line(430, 370, 430, 335);
	floodfill(438, 340, 1);

	setlinestyle(0, 1, 1);
	//lines Thin - drawing
	line(475, 200, 475, 170);
	line(475, 170, 550, 170);
	line(550, 170, 550, 25);//up
	line(550, 25, 90, 25);
	line(90, 25, 90, 170);
	line(90, 170, 165, 170);
	line(165, 170, 165, 240);//left
	line(165, 240, 165, 270);
	line(165, 270, 90, 270);
	line(90, 270, 90, 405);
	line(90, 405, 550, 405);//down
	line(550, 405, 550, 270);//right
	line(550, 270, 475, 270);
	line(475, 270, 475, 240);
	line(475, 240, 475, 200);

	//setlinestyle(0, 1, 3);
	rectangle(470, 56, 520, 84);
		floodfill(475, 60, 1);
	rectangle(470, 110, 520, 136);
		floodfill(475, 120, 1);
	rectangle(355, 56, 444, 84);
		floodfill(360, 60, 1);
	rectangle(195, 56, 285, 84);
		floodfill(200, 60, 1);
	rectangle(120, 56, 170, 84);
		floodfill(130, 60, 1);
	rectangle(120, 110, 170, 136);
		floodfill(130, 120, 1);

	//rectangles - mid
	rectangle(430, 235, 445, 275);//right
		floodfill(435, 240, 1);
	rectangle(195, 235, 210, 275);//left
		floodfill(200, 250, 1);
	//up
	rectangle(195, 300, 285, 310);
		floodfill(200, 305, 1);
	rectangle(355, 300, 445, 310);
		floodfill(370, 305, 1);
	//center
	rectangle(395, 235, 245, 205);



	//rectangles - down
	//#1-right
	line(470, 295, 520, 295);
	line(520, 295, 520, 305);
	line(520, 305, 500, 305);
	line(500, 305, 500, 340);
	line(500, 340, 470, 340);
	line(470, 340, 470, 295);
	floodfill(480, 300, 1);
	//#2-left
	line(170, 295, 120, 295);
	line(120, 295, 120, 305);
	line(120, 305, 140, 305);
	line(140, 305, 140, 340);
	line(140, 340, 170, 340);
	line(170, 340, 170, 295);
	floodfill(160, 300, 1);

	setcolor(RED);
	outtextxy(430,430,"Press Esc To Exit.....");


}

int checkBorder(int bodyi,int bodyj)
{
if(getpixel(bodyi,bodyj) != 1 && getpixel(bodyi+9,bodyj) != 1 && getpixel(bodyi,bodyj+9) != 1 && getpixel(bodyi-9,bodyj) != 1 && getpixel(bodyi,bodyj-9) != 1)
{
return 0;
}
else
{
return 1;
}
}

/*int check(int bodyi,int bodyj)
{
if(getpixel(bodyi,bodyj) == 0 && getpixel(bodyi+9,bodyj) == 0 && getpixel(bodyi,bodyj+9) == 0 && getpixel(bodyi-9,bodyj) == 0 && getpixel(bodyi,bodyj-9) == 0)
{
return 0;
}
else
{
return 1;
}
}*/

void Ghost1(int g1)
{
switch(g1)
{
case 1://move up
while(1)  //move up
{
if(getpixel(G1x,G1y - 12) != 0)
{
break;
}
else
{
setcolor(RED);
circle(G1x,G1y,8);
floodfill(G1x,G1y,RED);
setfillstyle(1, RED);
g1x=0;
g1y=-1;
setcolor(0);
circle(G1x,G1y,8);
floodfill(G1x,G1y,BLACK);
G1x = G1x + g1x;
G1y = G1y + g1y;
delay(5);
}
}
break;

case 2://move left
while(1)
{
if(getpixel(G1x - 12,G1y) != 0)   //move left
{
break;
}
else
{
setcolor(RED);
circle(G1x,G1y,8);
floodfill(G1x,G1y,RED);
setfillstyle(1, RED);
g1x=-1;
g1y=0;
setcolor(0);
circle(G1x,G1y,8);
floodfill(G1x,G1y,BLACK);
G1x = G1x + g1x;
G1y = G1y + g1y;
delay(5);
}
}
break;

case 3://move right
while(1)
{
if(getpixel(G1x + 12,G1y) != 0)   //move right
{
break;
}
else
{
setcolor(RED);
circle(G1x,G1y,8);
floodfill(G1x,G1y,RED);
setfillstyle(1, RED);
g1x=1;
g1y=0;
setcolor(0);
circle(G1x,G1y,8);
floodfill(G1x,G1y,BLACK);
G1x = G1x + g1x;
G1y = G1y + g1y;
delay(5);
}
}
break;

case 4://move down
while(1)
{
if(getpixel(G1x,G1y + 12) != 0)   //move down
{
break;
}
else
{
setcolor(RED);
circle(G1x,G1y,8);
floodfill(G1x,G1y,RED);
setfillstyle(1, RED);
g1x=0;
g1y=1;
setcolor(0);
circle(G1x,G1y,8);
floodfill(G1x,G1y,BLACK);
G1x = G1x + g1x;
G1y = G1y + g1y;
delay(5);
}
}
break;

default://stay
g1x = 0;
g1y = 0;
}
}

void Ghost2(int g2)
{

switch(g2)

case 1://move up
while(1)  //move up
{

if(getpixel(G2x,G2y - 12) != 0)
{
break;
}
else
{
setcolor(CYAN);
circle(G2x,G2y,8);
floodfill(G2x,G2y,CYAN);
setfillstyle(1, CYAN);
g2x=0;
g2y=-1;
setcolor(0);
circle(G2x,G2y,8);
floodfill(G2x,G2y,BLACK);
G2x = G2x + g2x;
G2y = G2y + g2y;
delay(5);
}

break;

case 2://move left
while(1)
{
if(getpixel(G2x - 12,G2y) != 0)   //move left
{
break;
}
else
{
setcolor(CYAN);
circle(G2x,G2y,8);
floodfill(G2x,G2y,CYAN);
setfillstyle(1, CYAN);
g2x=-1;
g2y=0;
setcolor(0);
circle(G2x,G2y,8);
floodfill(G2x,G2y,BLACK);
G2x = G2x + g2x;
G2y = G2y + g2y;
delay(5);
}
}
break;

case 3://move right
while(1)
{
if(getpixel(G2x + 12,G2y) != 0)   //move right
{
break;
}
else
{
setcolor(CYAN);
circle(G2x,G2y,8);
floodfill(G2x,G2y,CYAN);
setfillstyle(1, CYAN);
g2x=1;
g2y=0;
setcolor(0);
circle(G2x,G2y,8);
floodfill(G2x,G2y,BLACK);
G2x = G2x + g2x;
G2y = G2y + g2y;
delay(5);
}
}
break;

case 4://move down
while(1)
{
if(getpixel(G2x,G2y + 12) != 0)   //move down
{
break;
}
else
{
setcolor(CYAN);
circle(G2x,G2y,8);
floodfill(G2x,G2y,CYAN);
setfillstyle(1, CYAN);
g2x=0;
g2y=1;
setcolor(0);
circle(G2x,G2y,8);
floodfill(G2x,G2y,BLACK);
G2x = G2x + g2x;
G2y = G2y + g2y;
delay(5);
}
}
break;

default://stay
g2x = 0;
g2y = 0;
}
}

void Ghost3(int g3)
{
switch(g3)
{
case 1://move up
while(1)  //move up
{
if(getpixel(G3x,G3y - 12) != 0)
{
break;
}
else
{
setcolor(GREEN);
circle(G3x,G3y,8);
floodfill(G3x,G3y,GREEN);
setfillstyle(1, GREEN);
g3x=0;
g3y=-1;
setcolor(0);
circle(G3x,G3y,8);
floodfill(G3x,G3y,BLACK);
G3x = G3x + g3x;
G3y = G3y + g3y;
delay(5);
}
}
break;

case 2://move left
while(1)
{
if(getpixel(G3x - 12,G3y) != 0)   //move left
{
break;
}
else
{
setcolor(GREEN);
circle(G3x,G3y,8);
floodfill(G3x,G3y,GREEN);
setfillstyle(1, GREEN);
g3x=-1;
g3y=0;
setcolor(0);
circle(G3x,G3y,8);
floodfill(G3x,G3y,BLACK);
G3x = G3x + g3x;
G3y = G3y + g3y;
delay(5);
}
}
break;

case 3://move right
while(1)
{
if(getpixel(G3x + 12,G3y) != 0)   //move right
{
break;
}
else
{
setcolor(GREEN);
circle(G3x,G3y,8);
floodfill(G3x,G3y,GREEN);
setfillstyle(1, GREEN);
g3x=1;
g3y=0;
setcolor(0);
circle(G3x,G3y,8);
floodfill(G3x,G3y,BLACK);
G3x = G3x + g3x;
G3y = G3y + g3y;
delay(5);
}
}
break;

case 4://move down
while(1)
{
if(getpixel(G3x,G3y + 12) != 0)   //move down
{
break;
}
else
{
setcolor(GREEN);
circle(G3x,G3y,8);
floodfill(G3x,G3y,GREEN);
setfillstyle(1, GREEN);
g3x=0;
g3y=1;
setcolor(0);
circle(G3x,G3y,8);
floodfill(G3x,G3y,BLACK);
G3x = G3x + g3x;
G3y = G3y + g3y;
delay(5);
}
}
break;

default://stay
g3x = 0;
g3y = 0;
}
}

void Ghost4(int g4)
{
switch(g4)
{
case 1://move up
while(1)  //move up
{
if(getpixel(G4x,G4y - 12) != 0)
{
break;
}
else
{
setcolor(MAGENTA);
circle(G4x,G4y,8);
floodfill(G4x,G4y,MAGENTA);
setfillstyle(1, MAGENTA);
g4x=0;
g4y=-1;
setcolor(0);
circle(G4x,G4y,8);
floodfill(G4x,G4y,BLACK);
G4x = G4x + g4x;
G4y = G4y + g4y;
delay(5);

}
}
break;

case 2://move left
while(1)
{
if(getpixel(G4x - 12,G4y) != 0)   //move left
{
break;
}
else
{
setcolor(5);
circle(G4x,G4y,8);
floodfill(G4x,G4y,5);
setfillstyle(1, 5);
g4x=-1;
g4y=0;
setcolor(0);
circle(G4x,G4y,8);
floodfill(G4x,G4y,BLACK);
G4x = G4x + g4x;
G4y = G4y + g4y;
delay(5);
}
}
break;

case 3://move right
while(1)
{
if(getpixel(G4x + 12,G4y) != 0)   //move right
{
break;
}
else
{
setcolor(5);
circle(G4x,G4y,8);
floodfill(G4x,G4y,5);
setfillstyle(1, 5);
g4x=1;
g4y=0;
setcolor(0);
circle(G4x,G4y,8);
floodfill(G4x,G4y,BLACK);
G4x = G4x + g4x;
G4y = G4y + g4y;
delay(5);
}
}
break;

case 4://move down
while(1)
{
if(getpixel(G4x,G4y + 12) != 0)   //move down
{
break;
}
else
{
setcolor(5);
circle(G4x,G4y,8);
floodfill(G4x,G4y,5);
setfillstyle(1, 5);
g4x=0;
g4y=1;
setcolor(0);
circle(G4x,G4y,8);
floodfill(G4x,G4y,BLACK);
G4x = G4x + g4x;
G4y = G4y + g4y;
delay(5);
}
}
break;

default://stay
g4x = 0;
g4y = 0;
}
}

void movePacman()
{
   Death();
if(kbhit())
{
int ch = getch();
switch(ch)
{
case 72: //move up
if(getpixel(bodyi,bodyj - 9) != 1)
{
while(getpixel(bodyi,bodyj - 9) != 1)
{
setcolor(YELLOW);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,YELLOW);
setfillstyle(1, YELLOW);
x=0;
y=-1;
setcolor(0);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,BLACK);
bodyi = bodyi + x;
bodyj = bodyj + y;
delay(5);
}
}
else
{
x = 0;
y = 0;
}
break;

case 75: //move left
if(getpixel(bodyi - 9,bodyj) != 1)
{
while(getpixel(bodyi - 9,bodyj) != 1)
{
setcolor(YELLOW);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,YELLOW);
setfillstyle(1, YELLOW);
x=-1;
y=0;
setcolor(0);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,BLACK);
bodyi = bodyi + x;
bodyj = bodyj + y;
delay(5);
}
}
else
{
x = 0;
y = 0;
}
break;

case 77: //move right
if(getpixel(bodyi + 9,bodyj) != 1)
{
while(getpixel(bodyi + 9,bodyj) != 1)
{
setcolor(YELLOW);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,YELLOW);
setfillstyle(1, YELLOW);
x=1;
y=0;
setcolor(0);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,BLACK);
bodyi = bodyi + x;
bodyj = bodyj + y;
delay(5);
}
}
else
{
x = 0;
y = 0;
}
break;

case 80: //move down
if(getpixel(bodyi,bodyj + 9) != 1)
{
while(getpixel(bodyi,bodyj + 9) != 1)
{
setcolor(YELLOW);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,YELLOW);
setfillstyle(1, YELLOW);
x=0;
y=1;
setcolor(0);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,BLACK);
bodyi = bodyi + x;
bodyj = bodyj + y;
delay(5);
}
}
else
{
x = 0;
y = 0;
}
break;

case 27: //ESC to EXIT
exitGame();
break;
}
}
/*if(!check(bodyi,bodyj,BLUE))
{
setcolor(YELLOW);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,YELLOW);
setfillstyle(1, YELLOW);
}
else
{
bodyi = bodyi - x;
bodyj = bodyj - y;
}
setcolor(YELLOW);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,YELLOW);
setfillstyle(1, YELLOW);
setcolor(RED);
if(kbhit()) //check if key is pressed
{
ch=getch();
if(ch==72)   //move upward
{
x=0;
y=-2;
delay(1);
}
if(ch==75)   //move left
{
x=-2;
y=0;
delay(1);
}
if(ch==77)   //move right
{
x=2;
y=0;
delay(1);
}
if(ch==80)   //move down
{
x=0;
y=2;
delay(1);
}
if(ch==27)   //exit when ESC is pressed
{
exitGame();
}
setcolor(0);
circle(bodyi,bodyj,8);
floodfill(bodyi,bodyj,BLACK);
bodyi = bodyi + x;
bodyj = bodyj + y;
movePacman();
} */
}

void pacLevel1()
{
while(1)
{
Time++;
level1();
movePacman();

int g1 = rand() % 5;
Ghost1(g1);
movePacman();

int g2 = rand() % 5;
Ghost2(g2);
movePacman();

int g3 = rand() % 5;
Ghost3(g3);
movePacman();

}
}

void pacLevel2()
{
while(1)
{
Time++;
level1();
movePacman();
int g1 = rand() % 5;
Ghost1(g1);
int g2 = rand() % 5;
Ghost2(g2);
int g3 = rand() % 5;
Ghost3(g3);
int g4 = rand() % 5;
Ghost4(g4);
}
}


int main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");

mainMenu();
getch();
closegraph();
return 0;
}
